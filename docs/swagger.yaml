basePath: /
definitions:
  dto.AbsensiRequestDTO:
    properties:
      mahasantri_id:
        type: integer
      mentor_id:
        type: integer
      status:
        description: '"Hadir", "Alpa", "Izin"'
        enum:
        - hadir
        - alpa
        - izin
        type: string
      tanggal:
        description: 'Format: dd-mm-yyyy'
        type: string
      waktu:
        description: '"Shubuh" atau "Isya"'
        enum:
        - shubuh
        - isya
        type: string
    required:
    - mahasantri_id
    - mentor_id
    - status
    - tanggal
    - waktu
    type: object
  dto.CreateHafalanRequest:
    properties:
      catatan:
        type: string
      halaman:
        type: string
      juz:
        maximum: 30
        minimum: 1
        type: integer
      kategori:
        enum:
        - ziyadah
        - murojaah
        type: string
      mahasantri_id:
        type: integer
      mentor_id:
        type: integer
      total_setoran:
        minimum: 0
        type: number
      waktu:
        enum:
        - shubuh
        - isya
        type: string
    required:
    - halaman
    - juz
    - kategori
    - mahasantri_id
    - mentor_id
    - total_setoran
    - waktu
    type: object
  dto.CreateTargetSemesterRequest:
    properties:
      keterangan:
        type: string
      mahasantri_id:
        type: integer
      semester:
        enum:
        - Ganjil
        - Genap
        type: string
      tahun_ajaran:
        type: string
      target:
        type: integer
    required:
    - mahasantri_id
    - semester
    - tahun_ajaran
    - target
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        minLength: 6
        type: string
      nim:
        type: string
    required:
    - new_password
    type: object
  dto.JadwalPersonalResponse:
    properties:
      efektifitas_jadwal:
        type: integer
      id:
        type: integer
      jadwal:
        type: string
      kesibukan:
        type: string
      mahasantri_id:
        type: integer
      mentor_id:
        type: integer
      total_hafalan:
        type: integer
    type: object
  dto.LoginMahasantriRequest:
    properties:
      nim:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - nim
    - password
    type: object
  dto.LoginMentorRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.MahasantriResponse:
    properties:
      gender:
        type: string
      id:
        type: integer
      is_data_murojaah_filled:
        type: boolean
      jadwal_personal:
        $ref: '#/definitions/dto.JadwalPersonalResponse'
      jurusan:
        type: string
      mentor_id:
        type: integer
      nama:
        type: string
      nim:
        type: string
    type: object
  dto.MentorResponse:
    properties:
      email:
        type: string
      gender:
        type: string
      id:
        type: integer
      jadwal_personal:
        $ref: '#/definitions/dto.JadwalPersonalResponse'
      mahasantri:
        items:
          $ref: '#/definitions/dto.MahasantriResponse'
        type: array
      mahasantri_count:
        type: integer
      nama:
        type: string
    type: object
  dto.RecommendationRequest:
    properties:
      kategori_hafalan:
        type: string
      kesibukan:
        type: string
    type: object
  dto.RegisterMahasantriRequest:
    properties:
      gender:
        enum:
        - L
        - P
        type: string
      jurusan:
        type: string
      mentor_id:
        type: integer
      nama:
        type: string
      nim:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - gender
    - jurusan
    - mentor_id
    - nama
    - nim
    - password
    type: object
  dto.RegisterMentorRequest:
    properties:
      email:
        type: string
      gender:
        enum:
        - L
        - P
        type: string
      nama:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - gender
    - nama
    - password
    type: object
  dto.UpdateAbsensiRequestDTO:
    properties:
      status:
        description: '"Hadir", "Alpa", "Izin"'
        type: string
      tanggal:
        description: 'Format: dd-mm-yyyy'
        type: string
      waktu:
        description: '"Shubuh" atau "Isya"'
        type: string
    type: object
  dto.UpdateHafalanRequest:
    properties:
      catatan:
        type: string
      halaman:
        type: string
      juz:
        type: integer
      kategori:
        type: string
      total_setoran:
        type: number
      waktu:
        type: string
    type: object
  dto.UpdateMahasantriRequest:
    properties:
      gender:
        type: string
      jurusan:
        type: string
      nama:
        type: string
      nim:
        type: string
    type: object
  dto.UpdateMentorRequest:
    properties:
      email:
        type: string
      gender:
        type: string
      nama:
        type: string
    type: object
  dto.UpdateTargetSemesterRequest:
    properties:
      keterangan:
        type: string
      semester:
        type: string
      tahun_ajaran:
        type: string
      target:
        type: integer
    type: object
  utils.ErrorResponseSwagger:
    properties:
      error:
        example: Invalid Mahasantri ID
        type: string
      message:
        example: Bad Request
        type: string
      status:
        example: error
        type: string
    type: object
  utils.Pagination:
    properties:
      current_page:
        type: integer
      total_data:
        type: integer
      total_pages:
        type: integer
    type: object
  utils.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status:
        type: boolean
    type: object
  utils.SuccessResponseSwagger:
    properties:
      data: {}
      message:
        example: Request successful
        type: string
      status:
        example: success
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API untuk sistem Mahad
  title: Mahad Service API
  version: "1.0"
paths:
  /api/v1/absensi:
    get:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengambil data absensi dengan pagination,
        filter, dan sorting.
      parameters:
      - default: 1
        description: Nomor halaman
        in: query
        name: page
        type: integer
      - default: 10
        description: Jumlah data per halaman
        in: query
        name: limit
        type: integer
      - description: Filter berdasarkan bulan (MM)
        in: query
        name: month
        type: string
      - description: Filter berdasarkan status
        in: query
        name: status
        type: string
      - description: Filter berdasarkan waktu
        in: query
        name: waktu
        type: string
      - description: Filter berdasarkan ID Mahasantri
        in: query
        name: mahasantri_id
        type: integer
      - description: Filter berdasarkan ID Mentor
        in: query
        name: mentor_id
        type: integer
      - description: Filter berdasarkan tanggal (DD-MM-YYYY)
        in: query
        name: tanggal
        type: string
      - default: desc
        description: Sort by created_at
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data absensi retrieved successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to retrieve absensi
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil data absensi
      tags:
      - Absensi
    post:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk membuat absensi baru untuk Mahasantri
        berdasarkan data yang dikirimkan oleh mentor. Dapat menerima satu atau beberapa
        data absensi dalam satu request.
      parameters:
      - description: Data Absensi dalam bentuk array
        in: body
        name: request
        required: true
        schema:
          items:
            $ref: '#/definitions/dto.AbsensiRequestDTO'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Absensi created successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body or Absensi already recorded for this date
            and time
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to create absensi
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Membuat absensi baru untuk Mahasantri
      tags:
      - Absensi
  /api/v1/absensi/{id}:
    delete:
      description: Endpoint ini digunakan untuk menghapus data absensi berdasarkan
        ID yang diberikan.
      parameters:
      - description: ID Absensi
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Absensi deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Absensi not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to delete absensi
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Menghapus data absensi berdasarkan ID
      tags:
      - Absensi
    get:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengambil data absensi berdasarkan
        ID.
      parameters:
      - description: ID Absensi
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Data absensi retrieved successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Absensi not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to retrieve absensi
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil data absensi berdasarkan ID
      tags:
      - Absensi
    put:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengupdate data absensi berdasarkan
        ID.
      parameters:
      - description: ID Absensi
        in: path
        name: id
        required: true
        type: integer
      - description: Data absensi
        in: body
        name: absensi
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAbsensiRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Absensi updated successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Absensi not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to update absensi
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengupdate data absensi
      tags:
      - Absensi
  /api/v1/absensi/mahasantri/{mahasantri_id}/daily-summary:
    get:
      description: Mengambil data absensi harian Mahasantri selama 1 bulan berdasarkan
        waktu shubuh dan isya. Data akan mengisi status absen per hari, default "belum-absen"
        jika belum mengisi.
      parameters:
      - description: ID Mahasantri
        in: path
        name: mahasantri_id
        required: true
        type: integer
      - description: 'Bulan (format: MM, contoh: 04 untuk April)'
        in: query
        name: month
        required: true
        type: string
      - description: 'Tahun (format: YYYY, contoh: 2025)'
        in: query
        name: year
        required: true
        type: string
      responses:
        "200":
          description: Data absensi retrieved successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Absensi not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to retrieve absensi
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mendapatkan ringkasan absensi harian Mahasantri
      tags:
      - Absensi
  /api/v1/auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Endpoint untuk mengupdate password untuk Mahasantri atau Mentor
        berdasarkan NIM atau Email
      parameters:
      - description: Data untuk reset password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Forgot Password
      tags:
      - Auth
  /api/v1/auth/login/mahasantri:
    post:
      consumes:
      - application/json
      description: Melakukan login untuk mahasantri dengan NIM dan password
      parameters:
      - description: Data login Mahasantri
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.LoginMahasantriRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Login Mahasantri
      tags:
      - Auth
  /api/v1/auth/login/mentor:
    post:
      consumes:
      - application/json
      description: Melakukan login untuk mentor dengan email dan password
      parameters:
      - description: Data login Mentor
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.LoginMentorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Login Mentor
      tags:
      - Auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Endpoint untuk logout dan menghapus token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Logout
      tags:
      - Auth
  /api/v1/auth/me:
    get:
      consumes:
      - application/json
      description: Mengambil data user yang sedang login (baik Mentor atau Mahasantri)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get current user data
      tags:
      - Auth
  /api/v1/auth/register/mahasantri:
    post:
      consumes:
      - application/json
      description: Mendaftarkan akun Mahasantri baru
      parameters:
      - description: Data pendaftaran Mahasantri
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterMahasantriRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Register Mahasantri
      tags:
      - Auth
  /api/v1/auth/register/mentor:
    post:
      consumes:
      - application/json
      description: Mendaftarkan akun Mentor baru
      parameters:
      - description: Data pendaftaran Mentor
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterMentorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Register Mentor
      tags:
      - Auth
  /api/v1/hafalan:
    get:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengambil data hafalan secara terpaginated.
      parameters:
      - default: 1
        description: Halaman yang ingin diambil
        in: query
        name: page
        type: integer
      - default: 10
        description: Jumlah data per halaman
        in: query
        name: limit
        type: integer
      - default: desc
        description: Sort by created_at
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      - description: ID Mentor untuk filter
        in: query
        name: mentor_id
        type: integer
      - description: ID Mahasantri untuk filter
        in: query
        name: mahasantri_id
        type: integer
      - description: Kategori untuk filter
        in: query
        name: kategori
        type: string
      - description: Waktu untuk filter
        in: query
        name: waktu
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Hafalan fetched successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to fetch hafalan
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil semua data hafalan dengan pagination
      tags:
      - Hafalan
    post:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk menambahkan hafalan baru oleh mentor
      parameters:
      - description: Create Hafalan Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateHafalanRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Hafalan created successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to create hafalan
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Menambahkan hafalan baru
      tags:
      - Hafalan
  /api/v1/hafalan/{id}:
    delete:
      description: Endpoint ini digunakan untuk menghapus data hafalan berdasarkan
        ID yang diberikan.
      parameters:
      - description: ID Hafalan
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Hafalan deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Hafalan not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to delete hafalan
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Menghapus hafalan berdasarkan ID
      tags:
      - Hafalan
    get:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengambil data hafalan berdasarkan
        ID yang diberikan.
      parameters:
      - description: ID Hafalan
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Hafalan found
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Hafalan not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to fetch hafalan
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mendapatkan hafalan berdasarkan ID
      tags:
      - Hafalan
    put:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk memperbarui data hafalan yang sudah
        ada berdasarkan ID.
      parameters:
      - description: ID Hafalan
        in: path
        name: id
        required: true
        type: integer
      - description: Data untuk memperbarui hafalan
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateHafalanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Hafalan updated successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body or no changes detected
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Hafalan not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to update hafalan
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Memperbarui data hafalan berdasarkan ID
      tags:
      - Hafalan
  /api/v1/hafalan/{mahasantri_id}/kategori:
    get:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengambil data hafalan berdasarkan
        MahasantriID dan kategori (ziyadah atau murojaah), dengan dukungan pagination.
      parameters:
      - description: ID Mahasantri
        in: path
        name: mahasantri_id
        required: true
        type: integer
      - description: Kategori untuk memfilter hafalan
        enum:
        - ziyadah
        - murojaah
        in: query
        name: kategori
        required: true
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Hafalan by category fetched successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to fetch hafalan
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil semua hafalan berdasarkan MahasantriID dan kategori dengan
        pagination
      tags:
      - Hafalan
  /api/v1/hafalan/mahasantri/{mahasantri_id}:
    get:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengambil data hafalan berdasarkan
        MahasantriID, dengan dukungan filtering berdasarkan kategori dan juz serta
        pagination.
      parameters:
      - description: ID Mahasantri
        in: path
        name: mahasantri_id
        required: true
        type: integer
      - description: Filter by kategori
        enum:
        - ziyadah
        - murojaah
        in: query
        name: kategori
        type: string
      - description: Filter by juz
        example: 1, 2
        in: query
        name: juz
        type: string
      - description: Filter by waktu
        enum:
        - shubuh
        - isya
        in: query
        name: waktu
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: desc
        description: Sort by created_at
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Hafalan fetched successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to fetch hafalan
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil semua hafalan berdasarkan MahasantriID dengan pagination
        dan filtering
      tags:
      - Hafalan
  /api/v1/hafalan/mentor/{mentor_id}:
    get:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengambil data hafalan berdasarkan
        MentorID, dengan dukungan filtering berdasarkan kategori dan juz serta pagination.
      parameters:
      - description: ID Mentor
        in: path
        name: mentor_id
        required: true
        type: integer
      - description: Filter by kategori
        enum:
        - ziyadah
        - murojaah
        in: query
        name: kategori
        type: string
      - description: Filter by juz
        example: 1, 2
        in: query
        name: juz
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: desc
        description: Sort by created_at
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Hafalan fetched successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mentor or Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to fetch hafalan
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil semua hafalan berdasarkan MentorID dengan pagination dan
        filtering
      tags:
      - Hafalan
  /api/v1/jadwal-personal/all:
    get:
      consumes:
      - application/json
      description: Endpoint untuk mengambil daftar semua jadwal personal yang telah
        dibuat oleh pengguna, dengan pagination.
      parameters:
      - default: 1
        description: Nomor halaman
        in: query
        name: page
        type: integer
      - default: 10
        description: Jumlah data per halaman
        in: query
        name: limit
        type: integer
      - description: Filter berdasarkan kesibukan
        in: query
        name: kesibukan
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Daftar jadwal personal berhasil diambil
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Permintaan tidak valid
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Tidak terautentikasi
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Jadwal personal tidak ditemukan
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Gagal mengambil data
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil semua jadwal personal
      tags:
      - Jadwal Personal
  /api/v1/mahasantri:
    get:
      consumes:
      - application/json
      description: Get a list of all Mahasantri with pagination, only accessible by
        mentor
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      - description: Search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Mahasantri retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.MahasantriResponse'
                  type: array
                pagination:
                  $ref: '#/definitions/utils.Pagination'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get All Mahasantri
      tags:
      - Mahasantri
  /api/v1/mahasantri/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus data mahasantri berdasarkan ID. Hanya dapat diakses oleh
        mentor.
      parameters:
      - description: Mahasantri ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Mahasantri deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to delete mahasantri
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Menghapus mahasantri berdasarkan ID
      tags:
      - Mahasantri
    get:
      consumes:
      - application/json
      description: Mendapatkan data mahasantri dengan mencocokkan ID yang diberikan.
      parameters:
      - description: ID Mahasantri
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Mahasantri ditemukan
          schema:
            $ref: '#/definitions/dto.MahasantriResponse'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil mahasantri berdasarkan ID
      tags:
      - Mahasantri
    put:
      consumes:
      - application/json
      description: Memperbarui data mahasantri seperti nama, NIM, jurusan, dan gender
        berdasarkan ID. Hanya dapat diakses oleh mentor.
      parameters:
      - description: Mahasantri ID
        in: path
        name: id
        required: true
        type: integer
      - description: Data yang ingin diperbarui
        in: body
        name: updateMahasantriRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMahasantriRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Mahasantri updated successfully
          schema:
            $ref: '#/definitions/dto.MahasantriResponse'
        "400":
          description: Invalid request body or No changes detected
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to update mahasantri
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Memperbarui data mahasantri berdasarkan ID
      tags:
      - Mahasantri
  /api/v1/mahasantri/mentor/{mentor_id}:
    get:
      consumes:
      - application/json
      description: Mengambil data mahasantri yang memiliki mentor_id yang sesuai dengan
        parameter mentor_id.
      parameters:
      - description: ID Mentor
        in: path
        name: mentor_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of Mahasantri
          schema:
            items:
              $ref: '#/definitions/dto.MahasantriResponse'
            type: array
        "400":
          description: Invalid mentor ID format
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to fetch mahasantri for mentor
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil semua mahasantri berdasarkan mentor_id
      tags:
      - Mahasantri
  /api/v1/mentors:
    get:
      consumes:
      - application/json
      description: Endpoint untuk mengambil daftar mentor dengan pagination berdasarkan
        query parameter `page` dan `limit`
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of mentors retrieved successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to fetch mentors
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil daftar mentor dengan pagination
      tags:
      - Mentor
  /api/v1/mentors/{id}:
    delete:
      consumes:
      - application/json
      description: Endpoint untuk menghapus data mentor berdasarkan ID. Pastikan mentor
        yang ingin dihapus ada di database.
      parameters:
      - description: Mentor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Mentor deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mentor not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to delete mentor
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Menghapus mentor berdasarkan ID
      tags:
      - Mentor
    get:
      consumes:
      - application/json
      description: Endpoint untuk mengambil data mentor berdasarkan ID. Mahasantri
        yang dibimbing juga akan dimuat (Preload).
      parameters:
      - description: Mentor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Mentor data retrieved successfully
          schema:
            $ref: '#/definitions/dto.MentorResponse'
        "404":
          description: Mentor not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to fetch mentor
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil data mentor berdasarkan ID
      tags:
      - Mentor
    put:
      consumes:
      - application/json
      description: Endpoint untuk memperbarui data mentor berdasarkan ID. Pastikan
        email mentor yang baru tidak digunakan oleh mentor lain.
      parameters:
      - description: Mentor ID
        in: path
        name: id
        required: true
        type: integer
      - description: Data mentor yang akan diperbarui
        in: body
        name: updateMentorRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMentorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Mentor updated successfully
          schema:
            $ref: '#/definitions/dto.MentorResponse'
        "400":
          description: Invalid request body or no changes detected
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mentor not found
          schema:
            $ref: '#/definitions/utils.Response'
        "409":
          description: Email already in use
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to update mentor
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Memperbarui data mentor berdasarkan ID
      tags:
      - Mentor
  /api/v1/rekomendasi:
    get:
      consumes:
      - application/json
      description: Endpoint untuk mengambil riwayat rekomendasi jadwal yang pernah
        diberikan kepada pengguna yang sedang login.
      parameters:
      - default: 1
        description: Nomor halaman
        in: query
        name: page
        type: integer
      - default: 10
        description: Jumlah data per halaman
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Daftar riwayat rekomendasi berhasil diambil
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Tidak terautentikasi (token tidak valid)
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Tidak memiliki hak akses (role tidak sesuai)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Gagal mengambil riwayat rekomendasi
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil riwayat rekomendasi dengan pagination
      tags:
      - Rekomendasi
    post:
      consumes:
      - application/json
      description: Endpoint ini menghasilkan rekomendasi jadwal muroja'ah yang dipersonalisasi
        berdasarkan kondisi pengguna (kesibukan dan kategori hafalan).
      parameters:
      - description: Data kondisi pengguna untuk menghasilkan rekomendasi
        in: body
        name: rekomendasiRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RecommendationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Rekomendasi berhasil dibuat
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Request body tidak valid
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Tidak terautentikasi (token tidak valid)
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Tidak memiliki hak akses (role tidak sesuai)
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mendapatkan rekomendasi jadwal muroja'ah
      tags:
      - Rekomendasi
  /api/v1/target_semester:
    get:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk menampilkan semua target semester
      produces:
      - application/json
      responses:
        "200":
          description: Fetched target semesters successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to create target semester
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Menampilkan semua target semester
      tags:
      - TargetSemester
    post:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk membuat target semester untuk mahasantri
      parameters:
      - description: Create Target Semester Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTargetSemesterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Target semester created successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
        "409":
          description: Target semester already exists
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to create target semester
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Membuat target semester baru
      tags:
      - TargetSemester
  /api/v1/target_semester/{id}:
    delete:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk menghapus target semester berdasarkan
        ID
      parameters:
      - description: Target Semester ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Target semester deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Target semester not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to delete target semester
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Menghapus target semester
      tags:
      - TargetSemester
    get:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengambil data target semester berdasarkan
        ID yang diberikan.
      parameters:
      - description: ID Target Semester
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Target Semester found
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Target Semester not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to fetch target semester
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mendapatkan target semester berdasarkan ID
      tags:
      - TargetSemester
    put:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengupdate data target semester berdasarkan
        ID
      parameters:
      - description: Target Semester ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Target Semester Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTargetSemesterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Target semester updated successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body or no changes detected
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Target semester not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to update target semester
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update data target semester
      tags:
      - TargetSemester
  /api/v1/target_semester/mahasantri/{mahasantri_id}:
    get:
      consumes:
      - application/json
      description: Endpoint ini digunakan untuk mengambil target semester milik mahasantri
        tertentu, dengan optional filter dan pagination
      parameters:
      - description: Mahasantri ID
        in: path
        name: mahasantri_id
        required: true
        type: string
      - description: Filter by semester
        in: query
        name: semester
        type: string
      - description: Filter by tahun ajaran
        in: query
        name: tahun_ajaran
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Fetched target semesters successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Mahasantri not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to fetch target semesters
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Mengambil target semester berdasarkan ID mahasantri
      tags:
      - TargetSemester
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'Masukkan token dengan format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
