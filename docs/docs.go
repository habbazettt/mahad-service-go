// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/absensi": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint ini digunakan untuk membuat absensi baru untuk Mahasantri berdasarkan data yang dikirimkan oleh mentor.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Absensi"
                ],
                "summary": "Membuat absensi baru untuk Mahasantri",
                "parameters": [
                    {
                        "description": "Data Absensi",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AbsensiRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Absensi created successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or Absensi already recorded for this time",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mahasantri not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to create absensi",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/absensi/mahasantri/{mahasantri_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint ini digunakan untuk mendapatkan daftar absensi dari Mahasantri tertentu berdasarkan filter tanggal, waktu, status, serta mendukung paginasi.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Absensi"
                ],
                "summary": "Mendapatkan daftar absensi berdasarkan Mahasantri ID dengan filter tanggal, waktu, dan status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mahasantri ID",
                        "name": "mahasantri_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Tanggal awal filter (format: dd-mm-yyyy)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tanggal akhir filter (format: dd-mm-yyyy)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Waktu for filtering absensi",
                        "name": "waktu",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Status for filtering absensi",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit number of results per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Absensi retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input or query parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mahasantri not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve absensi",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/absensi/mahasantri/{mahasantri_id}/daily-summary": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mengambil data absensi harian Mahasantri selama 1 bulan berdasarkan waktu shubuh dan isya. Data akan mengisi status absen per hari, default \"belum-absen\" jika belum mengisi.",
                "tags": [
                    "Absensi"
                ],
                "summary": "Mendapatkan ringkasan absensi harian Mahasantri",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Mahasantri",
                        "name": "mahasantri_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bulan (format: MM, contoh: 04 untuk April)",
                        "name": "month",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Tahun (format: YYYY, contoh: 2025)",
                        "name": "year",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Berhasil mengambil ringkasan absensi harian",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.SuccessResponseSwagger"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.AbsensiDailySummaryDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request - Format salah atau parameter tidak lengkap",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Gagal mengambil data absensi",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/api/v1/absensi/mahasantri/{mahasantri_id}/per-month": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mengambil total absensi bulanan berdasarkan waktu (shubuh \u0026 isya) dan status (hadir, izin, alpa) dalam satu bulan tertentu.",
                "tags": [
                    "Absensi"
                ],
                "summary": "Mendapatkan ringkasan absensi bulanan Mahasantri",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Mahasantri",
                        "name": "mahasantri_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bulan (format: MM, contoh: 04 untuk April)",
                        "name": "month",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Tahun (format: YYYY, contoh: 2025)",
                        "name": "year",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Berhasil mengambil ringkasan absensi bulanan",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.SuccessResponseSwagger"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AbsensiMonthlySummaryDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request - Format salah atau parameter tidak lengkap",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Gagal mengambil data absensi",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/forgot-password": {
            "post": {
                "description": "Endpoint untuk mengupdate password untuk Mahasantri atau Mentor berdasarkan NIM atau Email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Forgot Password",
                "parameters": [
                    {
                        "description": "Data untuk reset password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorExample"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorExample"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorExample"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login/mahasantri": {
            "post": {
                "description": "Melakukan login untuk mahasantri dengan NIM dan password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login Mahasantri",
                "parameters": [
                    {
                        "description": "Data login Mahasantri",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginMahasantriRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessLoginMahasantriExample"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorLoginMahasantriExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorLoginMahasantriExample"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login/mentor": {
            "post": {
                "description": "Melakukan login untuk mentor dengan email dan password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login Mentor",
                "parameters": [
                    {
                        "description": "Data login Mentor",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginMentorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessLoginMentorExample"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorLoginMentorExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorLoginMentorExample"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Endpoint untuk logout dan menghapus token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorExample"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mengambil data user yang sedang login (baik Mentor atau Mahasantri)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get current user data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessGetCurrentUserExample"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorGetCurrentUserExample"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorGetCurrentUserExample"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register/mahasantri": {
            "post": {
                "description": "Mendaftarkan akun Mahasantri baru",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register Mahasantri",
                "parameters": [
                    {
                        "description": "Data pendaftaran Mahasantri",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterMahasantriRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessExample"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorExample"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorExample"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register/mentor": {
            "post": {
                "description": "Mendaftarkan akun Mentor baru",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register Mentor",
                "parameters": [
                    {
                        "description": "Data pendaftaran Mentor",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterMentorRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessMentorExample"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMentorExample"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMentorExample"
                        }
                    }
                }
            }
        },
        "/api/v1/hafalan": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint ini digunakan untuk mengambil data hafalan secara terpaginated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hafalan"
                ],
                "summary": "Mengambil semua data hafalan dengan pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Halaman yang ingin diambil",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Jumlah data per halaman",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort by created_at",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hafalan fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch hafalan",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint ini digunakan untuk menambahkan hafalan baru oleh mentor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hafalan"
                ],
                "summary": "Menambahkan hafalan baru",
                "parameters": [
                    {
                        "description": "Create Hafalan Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateHafalanRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Hafalan created successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mahasantri not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to create hafalan",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/hafalan/mahasantri/{mahasantri_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint ini digunakan untuk mengambil data hafalan berdasarkan MahasantriID, dengan dukungan filtering berdasarkan kategori dan juz serta pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hafalan"
                ],
                "summary": "Mengambil semua hafalan berdasarkan MahasantriID dengan pagination dan filtering",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Mahasantri",
                        "name": "mahasantri_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "ziyadah",
                            "murojaah"
                        ],
                        "type": "string",
                        "description": "Filter by kategori",
                        "name": "kategori",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "1, 2",
                        "description": "Filter by juz",
                        "name": "juz",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hafalan fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mahasantri not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch hafalan",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/hafalan/mentor/{mentor_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint ini digunakan untuk mengambil data hafalan berdasarkan MentorID, dengan dukungan filtering berdasarkan kategori dan juz serta pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hafalan"
                ],
                "summary": "Mengambil semua hafalan berdasarkan MentorID dengan pagination dan filtering",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Mentor",
                        "name": "mentor_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "ziyadah",
                            "murojaah"
                        ],
                        "type": "string",
                        "description": "Filter by kategori",
                        "name": "kategori",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "1, 2",
                        "description": "Filter by juz",
                        "name": "juz",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort by created_at",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hafalan fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mentor or Mahasantri not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch hafalan",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/hafalan/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint ini digunakan untuk mengambil data hafalan berdasarkan ID yang diberikan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hafalan"
                ],
                "summary": "Mendapatkan hafalan berdasarkan ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Hafalan",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hafalan found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Hafalan not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch hafalan",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint ini digunakan untuk memperbarui data hafalan yang sudah ada berdasarkan ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hafalan"
                ],
                "summary": "Memperbarui data hafalan berdasarkan ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Hafalan",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Data untuk memperbarui hafalan",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateHafalanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hafalan updated successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or no changes detected",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Hafalan not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update hafalan",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint ini digunakan untuk menghapus data hafalan berdasarkan ID yang diberikan.",
                "tags": [
                    "Hafalan"
                ],
                "summary": "Menghapus hafalan berdasarkan ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Hafalan",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hafalan deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Hafalan not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to delete hafalan",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/hafalan/{mahasantri_id}/kategori": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint ini digunakan untuk mengambil data hafalan berdasarkan MahasantriID dan kategori (ziyadah atau murojaah), dengan dukungan pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hafalan"
                ],
                "summary": "Mengambil semua hafalan berdasarkan MahasantriID dan kategori dengan pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Mahasantri",
                        "name": "mahasantri_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "ziyadah",
                            "murojaah"
                        ],
                        "type": "string",
                        "description": "Kategori untuk memfilter hafalan",
                        "name": "kategori",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hafalan by category fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mahasantri not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch hafalan",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/mahasantri": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all Mahasantri with pagination, only accessible by mentor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mahasantri"
                ],
                "summary": "Get All Mahasantri",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mahasantri retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.MahasantriResponse"
                                            }
                                        },
                                        "pagination": {
                                            "$ref": "#/definitions/utils.Pagination"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/mahasantri/mentor/{mentor_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mengambil data mahasantri yang memiliki mentor_id yang sesuai dengan parameter mentor_id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mahasantri"
                ],
                "summary": "Mengambil semua mahasantri berdasarkan mentor_id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Mentor",
                        "name": "mentor_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Mahasantri",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.MahasantriResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid mentor ID format",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch mahasantri for mentor",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/mahasantri/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mendapatkan data mahasantri dengan mencocokkan ID yang diberikan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mahasantri"
                ],
                "summary": "Mengambil mahasantri berdasarkan ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Mahasantri",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mahasantri ditemukan",
                        "schema": {
                            "$ref": "#/definitions/dto.MahasantriResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mahasantri not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Memperbarui data mahasantri seperti nama, NIM, jurusan, dan gender berdasarkan ID. Hanya dapat diakses oleh mentor.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mahasantri"
                ],
                "summary": "Memperbarui data mahasantri berdasarkan ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mahasantri ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Data yang ingin diperbarui",
                        "name": "updateMahasantriRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMahasantriRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mahasantri updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.MahasantriResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or No changes detected",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mahasantri not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update mahasantri",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Menghapus data mahasantri berdasarkan ID. Hanya dapat diakses oleh mentor.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mahasantri"
                ],
                "summary": "Menghapus mahasantri berdasarkan ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mahasantri ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mahasantri deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mahasantri not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to delete mahasantri",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/mentors": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint untuk mengambil daftar mentor dengan pagination berdasarkan query parameter ` + "`" + `page` + "`" + ` dan ` + "`" + `limit` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mentor"
                ],
                "summary": "Mengambil daftar mentor dengan pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of mentors retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch mentors",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/mentors/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint untuk mengambil data mentor berdasarkan ID. Mahasantri yang dibimbing juga akan dimuat (Preload).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mentor"
                ],
                "summary": "Mengambil data mentor berdasarkan ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mentor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mentor data retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.MentorResponse"
                        }
                    },
                    "404": {
                        "description": "Mentor not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch mentor",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint untuk memperbarui data mentor berdasarkan ID. Pastikan email mentor yang baru tidak digunakan oleh mentor lain.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mentor"
                ],
                "summary": "Memperbarui data mentor berdasarkan ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mentor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Data mentor yang akan diperbarui",
                        "name": "updateMentorRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMentorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mentor updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.MentorResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or no changes detected",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mentor not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "409": {
                        "description": "Email already in use",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update mentor",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Endpoint untuk menghapus data mentor berdasarkan ID. Pastikan mentor yang ingin dihapus ada di database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mentor"
                ],
                "summary": "Menghapus mentor berdasarkan ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mentor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mentor deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Mentor not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to delete mentor",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AbsensiDailySummaryDTO": {
            "type": "object",
            "properties": {
                "isya": {
                    "description": "hadir / absen / izin / belum-absen",
                    "type": "string"
                },
                "subuh": {
                    "description": "hadir / absen / izin / belum-absen",
                    "type": "string"
                },
                "tanggal": {
                    "description": "Format: dd-mm-yyyy",
                    "type": "string"
                }
            }
        },
        "dto.AbsensiMonthlySummaryDTO": {
            "type": "object",
            "properties": {
                "isya": {
                    "$ref": "#/definitions/dto.StatusCountDTO"
                },
                "month": {
                    "type": "string"
                },
                "shubuh": {
                    "$ref": "#/definitions/dto.StatusCountDTO"
                },
                "total_alpa": {
                    "type": "integer"
                },
                "total_hadir": {
                    "type": "integer"
                },
                "total_izin": {
                    "type": "integer"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "dto.AbsensiRequestDTO": {
            "type": "object",
            "required": [
                "mahasantri_id",
                "status",
                "waktu"
            ],
            "properties": {
                "mahasantri_id": {
                    "description": "Validasi untuk memastikan MahasantriID ada",
                    "type": "integer"
                },
                "status": {
                    "description": "\"Hadir\", \"Absen\", atau \"Izin\"",
                    "type": "string",
                    "enum": [
                        "hadir",
                        "absen",
                        "izin"
                    ]
                },
                "waktu": {
                    "description": "\"Shubuh\" atau \"Isya\"",
                    "type": "string",
                    "enum": [
                        "shubuh",
                        "isya"
                    ]
                }
            }
        },
        "dto.CreateHafalanRequest": {
            "type": "object",
            "required": [
                "halaman",
                "juz",
                "kategori",
                "mahasantri_id",
                "mentor_id",
                "total_setoran",
                "waktu"
            ],
            "properties": {
                "catatan": {
                    "type": "string"
                },
                "halaman": {
                    "type": "string"
                },
                "juz": {
                    "type": "integer",
                    "maximum": 30,
                    "minimum": 1
                },
                "kategori": {
                    "type": "string",
                    "enum": [
                        "ziyadah",
                        "murojaah"
                    ]
                },
                "mahasantri_id": {
                    "type": "integer"
                },
                "mentor_id": {
                    "type": "integer"
                },
                "total_setoran": {
                    "type": "number",
                    "minimum": 0
                },
                "waktu": {
                    "type": "string",
                    "enum": [
                        "shubuh",
                        "isya"
                    ]
                }
            }
        },
        "dto.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "new_password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 6
                },
                "nim": {
                    "type": "string"
                }
            }
        },
        "dto.LoginMahasantriRequest": {
            "type": "object",
            "required": [
                "nim",
                "password"
            ],
            "properties": {
                "nim": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "dto.LoginMentorRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "dto.MahasantriResponse": {
            "type": "object",
            "properties": {
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "jurusan": {
                    "type": "string"
                },
                "mentor_id": {
                    "type": "integer"
                },
                "nama": {
                    "type": "string"
                },
                "nim": {
                    "type": "string"
                }
            }
        },
        "dto.MentorResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "mahasantri": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MahasantriResponse"
                    }
                },
                "mahasantri_count": {
                    "type": "integer"
                },
                "nama": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterMahasantriRequest": {
            "type": "object",
            "required": [
                "gender",
                "jurusan",
                "mentor_id",
                "nama",
                "nim",
                "password"
            ],
            "properties": {
                "gender": {
                    "type": "string",
                    "enum": [
                        "L",
                        "P"
                    ]
                },
                "jurusan": {
                    "type": "string"
                },
                "mentor_id": {
                    "type": "integer"
                },
                "nama": {
                    "type": "string"
                },
                "nim": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "dto.RegisterMentorRequest": {
            "type": "object",
            "required": [
                "email",
                "gender",
                "nama",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "L",
                        "P"
                    ]
                },
                "nama": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "dto.StatusCountDTO": {
            "type": "object",
            "properties": {
                "alpa": {
                    "type": "integer"
                },
                "hadir": {
                    "type": "integer"
                },
                "izin": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateHafalanRequest": {
            "type": "object",
            "properties": {
                "catatan": {
                    "type": "string"
                },
                "halaman": {
                    "type": "string"
                },
                "juz": {
                    "type": "integer"
                },
                "kategori": {
                    "type": "string"
                },
                "total_setoran": {
                    "type": "number"
                },
                "waktu": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateMahasantriRequest": {
            "type": "object",
            "properties": {
                "gender": {
                    "type": "string"
                },
                "jurusan": {
                    "type": "string"
                },
                "nama": {
                    "type": "string"
                },
                "nim": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateMentorRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "nama": {
                    "type": "string"
                }
            }
        },
        "utils.ErrorExample": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string",
                    "example": "Invalid request body"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "utils.ErrorGetCurrentUserExample": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string",
                    "example": "Unauthorized"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "utils.ErrorLoginMahasantriExample": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string",
                    "example": "Invalid NIM or password"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "utils.ErrorLoginMentorExample": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string",
                    "example": "Invalid email or password"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "utils.ErrorMentorExample": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string",
                    "example": "Invalid request body"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "utils.ErrorResponseSwagger": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid Mahasantri ID"
                },
                "message": {
                    "type": "string",
                    "example": "Bad Request"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "utils.Pagination": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "total_data": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "utils.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "utils.SuccessExample": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Mahasantri registered successfully"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "utils.SuccessGetCurrentUserExample": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "User data retrieved"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "utils.SuccessLoginMahasantriExample": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Login successful"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "utils.SuccessLoginMentorExample": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Login successful"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "utils.SuccessMentorExample": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Mentor registered successfully"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "utils.SuccessResponseSwagger": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Request successful"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Masukkan token dengan format: Bearer {token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Mahad Service API",
	Description:      "API untuk sistem Mahad (Absensi, Hafalan, dll)",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
